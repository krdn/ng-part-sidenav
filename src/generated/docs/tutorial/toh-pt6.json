{
  "id": "tutorial/toh-pt6",
  "title": "HTTP",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/tutorial/toh-pt6.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"http\">HTTP<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#http\"><i class=\"material-icons\">link</i></a></h1>\n<p>In this tutorial, you'll add the following data persistence features with help from\nAngular's <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>.</p>\n<ul>\n<li>The <code>HeroService</code> gets hero data with HTTP requests.</li>\n<li>Users can add, edit, and delete heroes and save these changes over HTTP.</li>\n<li>Users can search for heroes by name.</li>\n</ul>\n<p>When you're done with this page, the app should look like this <live-example></live-example>.</p>\n<h2 id=\"enable-http-services\">Enable HTTP services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#enable-http-services\"><i class=\"material-icons\">link</i></a></h2>\n<p><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> is Angular's mechanism for communicating with a remote server over HTTP. </p>\n<p>To make <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> available everywhere in the app:</p>\n<ul>\n<li>open the root <code>AppModule</code> </li>\n<li>import the <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> symbol from <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code></li>\n</ul>\n<code-example path=\"toh-pt6/src/app/app.module.ts\" region=\"import-http-client\" header=\"src/app/app.module.ts (Http Client import)\">\nimport { <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a> }    from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n</code-example>\n<ul>\n<li>add it to the <code>@<a href=\"api/core/NgModule#imports\" class=\"code-anchor\">NgModule.imports</a></code> array</li>\n</ul>\n<h2 id=\"simulate-a-data-server\">Simulate a data server<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#simulate-a-data-server\"><i class=\"material-icons\">link</i></a></h2>\n<p>This tutorial sample <em>mimics</em> communication with a remote data server by using the\n<a href=\"https://github.com/angular/in-memory-web-api\" title=\"In-memory Web API\"><em>In-memory Web API</em></a> module.</p>\n<p>After installing the module, the app will make requests to and receive responses from the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>\nwithout knowing that the <em>In-memory Web API</em> is intercepting those requests,\napplying them to an in-memory data store, and returning simulated responses.</p>\n<p>This facility is a great convenience for the tutorial.\nYou won't have to set up a server to learn about <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>.</p>\n<p>It may also be convenient in the early stages of your own app development when\nthe server's web api is ill-defined or not yet implemented.</p>\n<div class=\"alert is-important\">\n<p><strong>Important:</strong> the <em>In-memory Web API</em> module has nothing to do with HTTP in Angular.</p>\n<p>If you're just <em>reading</em> this tutorial to learn about <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>, you can <a href=\"tutorial/toh-pt6#import-heroes\">skip over</a> this step.\nIf you're <em>coding along</em> with this tutorial, stay here and add the <em>In-memory Web API</em> now.</p>\n</div>\n<p>Install the <em>In-memory Web API</em> package from <em>npm</em></p>\n<code-example language=\"sh\" class=\"code-shell\">\n  npm install angular-in-memory-web-api --save\n</code-example>\n<p>Import the <code>HttpClientInMemoryWebApiModule</code> and the <code>InMemoryDataService</code> class,\nwhich you will create in a moment.</p>\n<code-example path=\"toh-pt6/src/app/app.module.ts\" region=\"import-in-mem-stuff\" header=\"src/app/app.module.ts (In-memory Web API imports)\">\nimport { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';\nimport { InMemoryDataService }  from './in-memory-data.service';\n\n</code-example>\n<p>Add the <code>HttpClientInMemoryWebApiModule</code> to the <code>@<a href=\"api/core/NgModule#imports\" class=\"code-anchor\">NgModule.imports</a></code> array—\n<em>after importing the <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code></em>,\n—while configuring it with the <code>InMemoryDataService</code>.</p>\n<code-example path=\"toh-pt6/src/app/app.module.ts\" region=\"in-mem-web-api-imports\">\n<a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n\n// The HttpClientInMemoryWebApiModule module intercepts HTTP requests\n// and returns simulated server responses.\n// Remove it when <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> real server is ready to receive requests.\nHttpClientInMemoryWebApiModule.forRoot(\n  InMemoryDataService, { dataEncapsulation: false }\n)\n\n</code-example>\n<p>The <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">forRoot()</a></code> configuration method takes an <code>InMemoryDataService</code> class\nthat primes the in-memory database.</p>\n<p>The class <code>src/app/in-memory-data.service.ts</code> is generated by the following command:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate service InMemoryData\n</code-example>\n<p>This class has the following content:</p>\n<code-example path=\"toh-pt6/src/app/in-memory-data.service.ts\" region=\"init\" header=\"src/app/in-memory-data.service.ts\" linenums=\"false\">\nimport { InMemoryDbService } from 'angular-in-memory-web-api';\nimport { Hero } from './hero';\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  <a href=\"api/core/Injectable#providedIn\" class=\"code-anchor\">providedIn</a>: 'root',\n})\nexport class InMemoryDataService implements InMemoryDbService {\n  createDb() {\n    const heroes = [\n      { id: 11, name: 'Mr. Nice' },\n      { id: 12, name: 'Narco' },\n      { id: 13, name: 'Bombasto' },\n      { id: 14, name: 'Celeritas' },\n      { id: 15, name: 'Magneta' },\n      { id: 16, name: 'RubberMan' },\n      { id: 17, name: 'Dynama' },\n      { id: 18, name: 'Dr IQ' },\n      { id: 19, name: 'Magma' },\n      { id: 20, name: 'Tornado' }\n    ];\n    return {heroes};\n  }\n\n  // Overrides the genId method to ensure that <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> hero always has an id.\n  // If the heroes array is empty,\n  // the method below returns the initial number (11).\n  // if the heroes array is not empty, the method below returns the highest\n  // hero id + 1.\n  genId(heroes: Hero[]): number {\n    return heroes.length > 0 ? Math.max(...heroes.map(hero => hero.id)) + 1 : 11;\n  }\n}\n\n\n</code-example>\n<p>This file replaces <code>mock-heroes.ts</code>, which is now safe to delete.</p>\n<p>When your server is ready, detach the <em>In-memory Web API</em>, and the app's requests will go through to the server.</p>\n<p>Now back to the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> story.</p>\n<a id=\"import-heroes\"></a>\n<h2 id=\"heroes-and-http\">Heroes and HTTP<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#heroes-and-http\"><i class=\"material-icons\">link</i></a></h2>\n<p>Import some HTTP symbols that you'll need:</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"import-httpclient\" header=\"src/app/hero.service.ts (import HTTP symbols)\">\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>, <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n</code-example>\n<p>Inject <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> into the constructor in a private property called <code><a href=\"api/common/http\" class=\"code-anchor\">http</a></code>.</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"ctor\">\nconstructor(\n  private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>,\n  private messageService: MessageService) { }\n\n</code-example>\n<p>Keep injecting the <code>MessageService</code>. You'll call it so frequently that\nyou'll wrap it in a private <code><a href=\"api/animations/browser/testing/MockAnimationDriver#log\" class=\"code-anchor\">log</a>()</code> method.</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"log\">\n/** Log <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> HeroService <a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a> with the MessageService */\nprivate <a href=\"api/animations/browser/testing/MockAnimationDriver#log\" class=\"code-anchor\">log</a>(<a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a>: string) {\n  this.messageService.add(`HeroService: ${<a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a>}`);\n}\n\n</code-example>\n<p>Define the <code>heroesUrl</code> of the form <code>:base/:collectionName</code> with the address of the heroes resource on the server.\nHere <code>base</code> is the resource to which requests are made,\nand <code>collectionName</code> is the heroes data object in the <code>in-memory-data-service.ts</code>.</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"heroesUrl\">\nprivate heroesUrl = 'api/heroes';  // <a href=\"api/core/SecurityContext#URL\" class=\"code-anchor\">URL</a> to web api\n\n</code-example>\n<h3 id=\"get-heroes-with-httpclient\">Get heroes with <em>HttpClient</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#get-heroes-with-httpclient\"><i class=\"material-icons\">link</i></a></h3>\n<p>The current <code>HeroService.getHeroes()</code>\nuses the RxJS <code>of()</code> function to return an array of mock heroes\nas an <code>Observable&#x3C;Hero[]></code>.</p>\n<code-example path=\"toh-pt4/src/app/hero.service.ts\" region=\"getHeroes-1\" header=\"src/app/hero.service.ts (getHeroes with RxJs &#x27;of()&#x27;)\">\ngetHeroes(): Observable&#x3C;Hero[]> {\n  return of(HEROES);\n}\n\n</code-example>\n<p>Convert that method to use <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"getHeroes-1\">\n/** GET heroes from the server */\ngetHeroes (): Observable&#x3C;Hero[]> {\n  return this.http.get&#x3C;Hero[]>(this.heroesUrl)\n}\n\n</code-example></p>\n<p>Refresh the browser. The hero data should successfully load from the\nmock server.</p>\n<p>You've swapped <code>of</code> for <code>http.get</code> and the app keeps working without any other changes\nbecause both functions return an <code>Observable&#x3C;Hero[]></code>.</p>\n<h3 id=\"http-methods-return-one-value\">Http methods return one value<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#http-methods-return-one-value\"><i class=\"material-icons\">link</i></a></h3>\n<p>All <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> methods return an RxJS <code>Observable</code> of something.</p>\n<p>HTTP is a request/response protocol.\nYou make a request, it returns a single response.</p>\n<p>In general, an observable <em>can</em> return multiple values over time.\nAn observable from <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> always emits a single value and then completes, never to emit again.</p>\n<p>This particular <code>HttpClient.get</code> call returns an <code>Observable&#x3C;Hero[]></code>, literally \"<em>an observable of hero arrays</em>\". In practice, it will only return a single hero array.</p>\n<h3 id=\"httpclientget-returns-response-data\"><em>HttpClient.get</em> returns response data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#httpclientget-returns-response-data\"><i class=\"material-icons\">link</i></a></h3>\n<p><code>HttpClient.get</code> returns the <em>body</em> of the response as an untyped JSON object by default.\nApplying the optional type specifier, <code>&#x3C;Hero[]></code> , gives you a typed result object.</p>\n<p>The shape of the JSON data is determined by the server's data API.\nThe <em>Tour of Heroes</em> data API returns the hero data as an array.</p>\n<div class=\"alert is-helpful\">\n<p>Other APIs may bury the data that you want within an object.\nYou might have to dig that data out by processing the <code>Observable</code> result\nwith the RxJS <code>map</code> operator.</p>\n<p>Although not discussed here, there's an example of <code>map</code> in the <code>getHeroNo404()</code>\nmethod included in the sample source code.</p>\n</div>\n<h3 id=\"error-handling\">Error handling<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#error-handling\"><i class=\"material-icons\">link</i></a></h3>\n<p>Things go wrong, especially when you're getting data from a remote server.\nThe <code>HeroService.getHeroes()</code> method should catch errors and do something appropriate.</p>\n<p>To catch errors, you <strong>\"pipe\" the observable</strong> result from <code>http.get()</code> through an RxJS <code>catchError()</code> operator.</p>\n<p>Import the <code>catchError</code> symbol from <code>rxjs/operators</code>, along with some other operators you'll need later.</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"import-rxjs-operators\">\nimport { catchError, map, tap } from 'rxjs/operators';\n\n</code-example>\n<p>Now extend the observable result with the <code>.pipe()</code> method and\ngive it a <code>catchError()</code> operator.</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"getHeroes-2\">\ngetHeroes (): Observable&#x3C;Hero[]> {\n  return this.http.get&#x3C;Hero[]>(this.heroesUrl)\n    .pipe(\n      catchError(this.handleError&#x3C;Hero[]>('getHeroes', []))\n    );\n}\n\n</code-example>\n<p>The <code>catchError()</code> operator intercepts an <strong><code>Observable</code> that failed</strong>.\nIt passes the error an <em>error handler</em> that can do what it wants with the error.</p>\n<p>The following <code><a href=\"api/core/ErrorHandler#handleError\" class=\"code-anchor\">handleError()</a></code> method reports the error and then returns an\ninnocuous result so that the application keeps working.</p>\n<h4 id=\"handleerror\"><em>handleError</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#handleerror\"><i class=\"material-icons\">link</i></a></h4>\n<p>The following <code><a href=\"api/core/ErrorHandler#handleError\" class=\"code-anchor\">handleError()</a></code> will be shared by many <code>HeroService</code> methods\nso it's generalized to meet their different needs.</p>\n<p>Instead of handling the error directly, it returns an <em>error handler</em> function to <code>catchError</code> that it\nhas configured with both the name of the operation that failed and a safe return value.</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"handleError\">\n/**\n * Handle <a href=\"api/http/Http\" class=\"code-anchor\">Http</a> operation that failed.\n * Let the app continue.\n * @param operation - name of the operation that failed\n * @param result - <a href=\"api/animations/AnimationQueryOptions#optional\" class=\"code-anchor\">optional</a> value to return as the observable result\n */\nprivate handleError&#x3C;T> (operation = 'operation', result?: T) {\n  return (error: any): Observable&#x3C;T> => {\n\n    // TODO: send the error to remote logging infrastructure\n    console.error(error); // <a href=\"api/animations/browser/testing/MockAnimationDriver#log\" class=\"code-anchor\">log</a> to console instead\n\n    // TODO: better job of transforming error for user consumption\n    this.log(`${operation} failed: ${error.message}`);\n\n    // Let the app keep running by returning an empty result.\n    return of(result as T);\n  };\n}\n\n</code-example>\n<p>After reporting the error to console, the handler constructs\na user friendly message and returns a safe value to the app so it can keep working.</p>\n<p>Because each service method returns a different kind of <code>Observable</code> result,\n<code><a href=\"api/core/ErrorHandler#handleError\" class=\"code-anchor\">handleError()</a></code> takes a type parameter so it can return the safe value as the type that the app expects.</p>\n<h3 id=\"tap-into-the-observable\">Tap into the <em>Observable</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#tap-into-the-observable\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code>HeroService</code> methods will <strong>tap</strong> into the flow of observable values\nand send a message (via <code><a href=\"api/animations/browser/testing/MockAnimationDriver#log\" class=\"code-anchor\">log</a>()</code>) to the message area at the bottom of the page.</p>\n<p>They'll do that with the RxJS <code>tap</code> operator,\nwhich <em>looks</em> at the observable values, does <em>something</em> with those values,\nand passes them along.\nThe <code>tap</code> call back doesn't touch the values themselves.</p>\n<p>Here is the final version of <code>getHeroes</code> with the <code>tap</code> that logs the operation.</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"getHeroes\">\n/** GET heroes from the server */\ngetHeroes (): Observable&#x3C;Hero[]> {\n  return this.http.get&#x3C;Hero[]>(this.heroesUrl)\n    .pipe(\n      tap(_ => this.log('fetched heroes')),\n      catchError(this.handleError&#x3C;Hero[]>('getHeroes', []))\n    );\n}\n\n</code-example>\n<h3 id=\"get-hero-by-id\">Get hero by id<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#get-hero-by-id\"><i class=\"material-icons\">link</i></a></h3>\n<p>Most web APIs support a <em>get by id</em> request in the form <code>:baseURL/:id</code>.</p>\n<p>Here, the <em>base URL</em> is the <code>heroesURL</code> defined in the <a href=\"tutorial/toh-pt6#heroes-and-http\">Heroes and HTTP</a> section (<code>api/heroes</code>) and <em>id</em> is\nthe number of the hero that you want to retrieve. For example, <code>api/heroes/11</code>.</p>\n<p>Add a <code>HeroService.getHero()</code> method to make that request:</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"getHero\" header=\"src/app/hero.service.ts\">\n/** GET hero by id. Will 404 if id not found */\ngetHero(id: number): Observable&#x3C;Hero> {\n  const url = `${this.heroesUrl}/${id}`;\n  return this.http.get&#x3C;Hero>(url).pipe(\n    tap(_ => this.log(`fetched hero id=${id}`)),\n    catchError(this.handleError&#x3C;Hero>(`getHero id=${id}`))\n  );\n}\n\n</code-example>\n<p>There are three significant differences from  <code>getHeroes()</code>.</p>\n<ul>\n<li>it constructs a request URL with the desired hero's id.</li>\n<li>the server should respond with a single hero rather than an array of heroes.</li>\n<li>therefore, <code>getHero</code> returns an <code>Observable&#x3C;Hero></code> (\"<em>an observable of Hero objects</em>\")\nrather than an observable of hero <em>arrays</em> .</li>\n</ul>\n<h2 id=\"update-heroes\">Update heroes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#update-heroes\"><i class=\"material-icons\">link</i></a></h2>\n<p>Edit a hero's name in the <em>hero detail</em> view.\nAs you type, the hero name updates the heading at the top of the page.\nBut when you click the \"go back button\", the changes are lost.</p>\n<p>If you want changes to persist, you must write them back to\nthe server.</p>\n<p>At the end of the hero detail template, add a save button with a <code>click</code> event\nbinding that invokes a new component method named <code>save()</code>.</p>\n<code-example path=\"toh-pt6/src/app/hero-detail/hero-detail.component.html\" region=\"save\" header=\"src/app/hero-detail/hero-detail.component.html (save)\">\n&#x3C;button (click)=\"save()\">save&#x3C;/button>\n\n</code-example>\n<p>Add the following <code>save()</code> method, which persists hero name changes using the hero service\n<code>updateHero()</code> method and then navigates back to the previous view.</p>\n<code-example path=\"toh-pt6/src/app/hero-detail/hero-detail.component.ts\" region=\"save\" header=\"src/app/hero-detail/hero-detail.component.ts (save)\">\nsave(): void {\n   this.heroService.updateHero(this.hero)\n     .subscribe(() => this.goBack());\n }\n\n</code-example>\n<h4 id=\"add-heroserviceupdatehero\">Add <em>HeroService.updateHero()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-heroserviceupdatehero\"><i class=\"material-icons\">link</i></a></h4>\n<p>The overall structure of the <code>updateHero()</code> method is similar to that of\n<code>getHeroes()</code>, but it uses <code>http.put()</code> to persist the changed hero\non the server.</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"updateHero\" header=\"src/app/hero.service.ts (update)\">\n/** PUT: <a href=\"api/forms/NgModel#update\" class=\"code-anchor\">update</a> the hero on the server */\nupdateHero (hero: Hero): Observable&#x3C;any> {\n  return this.http.put(this.heroesUrl, hero, httpOptions).pipe(\n    tap(_ => this.log(`updated hero id=${hero.id}`)),\n    catchError(this.handleError&#x3C;any>('updateHero'))\n  );\n}\n\n</code-example>\n<p>The <code><a href=\"api/common/http/HttpClient#put\" class=\"code-anchor\">HttpClient.put()</a></code> method takes three parameters</p>\n<ul>\n<li>the URL</li>\n<li>the data to update (the modified hero in this case)</li>\n<li>options</li>\n</ul>\n<p>The URL is unchanged. The heroes web API knows which hero to update by looking at the hero's <code>id</code>.</p>\n<p>The heroes web API expects a special header in HTTP save requests.\nThat header is in the <code>httpOptions</code> constant defined in the <code>HeroService</code>.</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"http-options\" header=\"src/app/hero.service.ts\">\nconst httpOptions = {\n  headers: new <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a>({ 'Content-Type': 'application/json' })\n};\n\n</code-example>\n<p>Refresh the browser, change a hero name and save your change. Navigating to the previous view is implemented in the <code>save()</code> method defined in <code>HeroDetailComponent</code>.\nThe hero now appears in the list with the changed name.</p>\n<h2 id=\"add-a-new-hero\">Add a new hero<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-a-new-hero\"><i class=\"material-icons\">link</i></a></h2>\n<p>To add a hero, this app only needs the hero's name. You can use an <code>input</code>\nelement paired with an add button.</p>\n<p>Insert the following into the <code>HeroesComponent</code> template, just after\nthe heading:</p>\n<code-example path=\"toh-pt6/src/app/heroes/heroes.component.html\" region=\"add\" header=\"src/app/heroes/heroes.component.html (add)\">\n&#x3C;div>\n  &#x3C;label>Hero name:\n    &#x3C;input #heroName />\n  &#x3C;/label>\n  &#x3C;!-- (click) passes input value to add() and then clears the input -->\n  &#x3C;button (click)=\"add(heroName.value); heroName.value=''\">\n    add\n  &#x3C;/button>\n&#x3C;/div>\n\n</code-example>\n<p>In response to a click event, call the component's click handler and then\nclear the input field so that it's ready for another name.</p>\n<code-example path=\"toh-pt6/src/app/heroes/heroes.component.ts\" region=\"add\" header=\"src/app/heroes/heroes.component.ts (add)\">\nadd(name: string): void {\n  name = name.trim();\n  if (!name) { return; }\n  this.heroService.addHero({ name } as Hero)\n    .subscribe(hero => {\n      this.heroes.push(hero);\n    });\n}\n\n</code-example>\n<p>When the given name is non-blank, the handler creates a <code>Hero</code>-like object\nfrom the name (it's only missing the <code>id</code>) and passes it to the services <code>addHero()</code> method.</p>\n<p>When <code>addHero</code> saves successfully, the <code>subscribe</code> callback\nreceives the new hero and pushes it into to the <code>heroes</code> list for display.</p>\n<p>You'll write <code>HeroService.addHero</code> in the next section.</p>\n<h4 id=\"add-heroserviceaddhero\">Add <em>HeroService.addHero()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-heroserviceaddhero\"><i class=\"material-icons\">link</i></a></h4>\n<p>Add the following <code>addHero()</code> method to the <code>HeroService</code> class.</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"addHero\" header=\"src/app/hero.service.ts (addHero)\">\n/** POST: add <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> new hero to the server */\naddHero (hero: Hero): Observable&#x3C;Hero> {\n  return this.http.post&#x3C;Hero>(this.heroesUrl, hero, httpOptions).pipe(\n    tap((newHero: Hero) => this.log(`added hero w/ id=${newHero.id}`)),\n    catchError(this.handleError&#x3C;Hero>('addHero'))\n  );\n}\n\n</code-example>\n<p><code>HeroService.addHero()</code> differs from <code>updateHero</code> in two ways.</p>\n<ul>\n<li>it calls <code><a href=\"api/common/http/HttpClient#post\" class=\"code-anchor\">HttpClient.post()</a></code> instead of <code>put()</code>.</li>\n<li>it expects the server to generate an id for the new hero,\nwhich it returns in the <code>Observable&#x3C;Hero></code> to the caller.</li>\n</ul>\n<p>Refresh the browser and add some heroes.</p>\n<h2 id=\"delete-a-hero\">Delete a hero<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#delete-a-hero\"><i class=\"material-icons\">link</i></a></h2>\n<p>Each hero in the heroes list should have a delete button.</p>\n<p>Add the following button element to the <code>HeroesComponent</code> template, after the hero\nname in the repeated <code>&#x3C;li></code> element.</p>\n<code-example path=\"toh-pt6/src/app/heroes/heroes.component.html\" region=\"delete\">\n&#x3C;button class=\"delete\" title=\"delete hero\"\n  (click)=\"delete(hero)\">x&#x3C;/button>\n\n</code-example>\n<p>The HTML for the list of heroes should look like this:</p>\n<code-example path=\"toh-pt6/src/app/heroes/heroes.component.html\" region=\"list\" header=\"src/app/heroes/heroes.component.html (list of heroes)\">\n&#x3C;ul class=\"heroes\">\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">\n    &#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\">\n      &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n    &#x3C;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>>\n    &#x3C;button class=\"delete\" title=\"delete hero\"\n      (click)=\"delete(hero)\">x&#x3C;/button>\n  &#x3C;/li>\n&#x3C;/ul>\n\n</code-example>\n<p>To position the delete button at the far right of the hero entry,\nadd some CSS to the <code>heroes.component.css</code>.  You'll find that CSS\nin the <a href=\"tutorial/toh-pt6#heroescomponent\">final review code</a> below.</p>\n<p>Add the <code>delete()</code> handler to the component.</p>\n<code-example path=\"toh-pt6/src/app/heroes/heroes.component.ts\" region=\"delete\" header=\"src/app/heroes/heroes.component.ts (delete)\">\ndelete(hero: Hero): void {\n  this.heroes = this.heroes.filter(h => h !== hero);\n  this.heroService.deleteHero(hero).subscribe();\n}\n\n</code-example>\n<p>Although the component delegates hero deletion to the <code>HeroService</code>,\nit remains responsible for updating its own list of heroes.\nThe component's <code>delete()</code> method immediately removes the <em>hero-to-delete</em> from that list,\nanticipating that the <code>HeroService</code> will succeed on the server.</p>\n<p>There's really nothing for the component to do with the <code>Observable</code> returned by\n<code>heroService.delete()</code>. <strong>It must subscribe anyway</strong>.</p>\n<div class=\"alert is-important\">\n<p>  If you neglect to <code>subscribe()</code>, the service will not send the delete request to the server!\nAs a rule, an <code>Observable</code> <em>does nothing</em> until something subscribes!</p>\n<p>  Confirm this for yourself by temporarily removing the <code>subscribe()</code>,\nclicking \"Dashboard\", then clicking \"Heroes\".\nYou'll see the full list of heroes again.</p>\n</div>\n<h4 id=\"add-heroservicedeletehero\">Add <em>HeroService.deleteHero()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-heroservicedeletehero\"><i class=\"material-icons\">link</i></a></h4>\n<p>Add a <code>deleteHero()</code> method to <code>HeroService</code> like this.</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"deleteHero\" header=\"src/app/hero.service.ts (delete)\">\n/** DELETE: delete the hero from the server */\ndeleteHero (hero: Hero | number): Observable&#x3C;Hero> {\n  const id = typeof hero === 'number' ? hero : hero.id;\n  const url = `${this.heroesUrl}/${id}`;\n\n  return this.http.delete&#x3C;Hero>(url, httpOptions).pipe(\n    tap(_ => this.log(`deleted hero id=${id}`)),\n    catchError(this.handleError&#x3C;Hero>('deleteHero'))\n  );\n}\n\n</code-example>\n<p>Note that</p>\n<ul>\n<li>it calls <code>HttpClient.delete</code>.</li>\n<li>the URL is the heroes resource URL plus the <code>id</code> of the hero to delete</li>\n<li>you don't send data as you did with <code>put</code> and <code>post</code>.</li>\n<li>you still send the <code>httpOptions</code>.</li>\n</ul>\n<p>Refresh the browser and try the new delete functionality.</p>\n<h2 id=\"search-by-name\">Search by name<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#search-by-name\"><i class=\"material-icons\">link</i></a></h2>\n<p>In this last exercise, you learn to chain <code>Observable</code> operators together\nso you can minimize the number of similar HTTP requests\nand consume network bandwidth economically.</p>\n<p>You will add a <em>heroes search</em> feature to the <em>Dashboard</em>.\nAs the user types a name into a search box,\nyou'll make repeated HTTP requests for heroes filtered by that name.\nYour goal is to issue only as many requests as necessary.</p>\n<h4 id=\"heroservicesearchheroes\"><em>HeroService.searchHeroes</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#heroservicesearchheroes\"><i class=\"material-icons\">link</i></a></h4>\n<p>Start by adding a <code>searchHeroes</code> method to the <code>HeroService</code>.</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"searchHeroes\" header=\"src/app/hero.service.ts\">\n/* GET heroes whose name contains <a href=\"api/common/PlatformLocation#search\" class=\"code-anchor\">search</a> term */\nsearchHeroes(term: string): Observable&#x3C;Hero[]> {\n  if (!term.trim()) {\n    // if not <a href=\"api/common/PlatformLocation#search\" class=\"code-anchor\">search</a> term, return empty hero array.\n    return of([]);\n  }\n  return this.http.get&#x3C;Hero[]>(`${this.heroesUrl}/?name=${term}`).pipe(\n    tap(_ => this.log(`found heroes matching \"${term}\"`)),\n    catchError(this.handleError&#x3C;Hero[]>('searchHeroes', []))\n  );\n}\n\n</code-example>\n<p>The method returns immediately with an empty array if there is no search term.\nThe rest of it closely resembles <code>getHeroes()</code>.\nThe only significant difference is the URL,\nwhich includes a query string with the search term.</p>\n<h3 id=\"add-search-to-the-dashboard\">Add search to the Dashboard<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-search-to-the-dashboard\"><i class=\"material-icons\">link</i></a></h3>\n<p>Open the <code>DashboardComponent</code> <em>template</em> and\nAdd the hero search element, <code>&#x3C;app-hero-search></code>, to the bottom of the <code>DashboardComponent</code> template.</p>\n<code-example path=\"toh-pt6/src/app/dashboard/dashboard.component.html\" header=\"src/app/dashboard/dashboard.component.html\" linenums=\"false\">\n&#x3C;h3>Top Heroes&#x3C;/h3>\n&#x3C;div class=\"grid grid-pad\">\n  &#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" class=\"col-1-4\"\n      <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\">\n    &#x3C;div class=\"module hero\">\n      &#x3C;h4>{{hero.name}}&#x3C;/h4>\n    &#x3C;/div>\n  &#x3C;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>>\n&#x3C;/div>\n\n&#x3C;app-hero-search>&#x3C;/app-hero-search>\n\n\n</code-example>\n<p>This template looks a lot like the <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> repeater in the <code>HeroesComponent</code> template.</p>\n<p>Unfortunately, adding this element breaks the app.\nAngular can't find a component with a selector that matches <code>&#x3C;app-hero-search></code>.</p>\n<p>The <code>HeroSearchComponent</code> doesn't exist yet. Fix that.</p>\n<h3 id=\"create-herosearchcomponent\">Create <em>HeroSearchComponent</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#create-herosearchcomponent\"><i class=\"material-icons\">link</i></a></h3>\n<p>Create a <code>HeroSearchComponent</code> with the CLI.</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate component hero-search\n</code-example>\n<p>The CLI generates the three <code>HeroSearchComponent</code> files and adds the component to the <code>AppModule</code> declarations</p>\n<p>Replace the generated <code>HeroSearchComponent</code> <em>template</em> with a text box and a list of matching search results like this.</p>\n<code-example path=\"toh-pt6/src/app/hero-search/hero-search.component.html\" header=\"src/app/hero-search/hero-search.component.html\">\n&#x3C;div id=\"search-component\">\n  &#x3C;h4>Hero Search&#x3C;/h4>\n\n  &#x3C;input #searchBox id=\"search-box\" (input)=\"<a href=\"api/common/PlatformLocation#search\" class=\"code-anchor\">search</a>(searchBox.value)\" />\n\n  &#x3C;ul class=\"search-result\">\n    &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes$ | <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>\" >\n      &#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\">\n        {{hero.name}}\n      &#x3C;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>>\n    &#x3C;/li>\n  &#x3C;/ul>\n&#x3C;/div>\n\n\n</code-example>\n<p>Add private CSS styles to <code>hero-search.component.css</code>\nas listed in the <a href=\"tutorial/toh-pt6#herosearchcomponent\">final code review</a> below.</p>\n<p>As the user types in the search box, an <em>input</em> event binding calls the component's <code><a href=\"api/common/PlatformLocation#search\" class=\"code-anchor\">search</a>()</code>\nmethod with the new search box value.</p>\n<a id=\"asyncpipe\"></a>\n<h3 id=\"asyncpipe\"><em>AsyncPipe</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#asyncpipe\"><i class=\"material-icons\">link</i></a></h3>\n<p>As expected, the <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> repeats hero objects.</p>\n<p>Look closely and you'll see that the <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> iterates over a list called <code>heroes$</code>, not <code>heroes</code>.</p>\n<code-example path=\"toh-pt6/src/app/hero-search/hero-search.component.html\" region=\"async\">\n&#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes$ | <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>\" >\n\n</code-example>\n<p>The <code>$</code> is a convention that indicates <code>heroes$</code> is an <code>Observable</code>, not an array.</p>\n<p>The <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> can't do anything with an <code>Observable</code>.\nBut there's also a pipe character (<code>|</code>) followed by <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code>,\nwhich identifies Angular's <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code>.</p>\n<p>The <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> subscribes to an <code>Observable</code> automatically so you won't have to\ndo so in the component class.</p>\n<h3 id=\"fix-the-herosearchcomponent-class\">Fix the <em>HeroSearchComponent</em> class<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#fix-the-herosearchcomponent-class\"><i class=\"material-icons\">link</i></a></h3>\n<p>Replace the generated <code>HeroSearchComponent</code> class and metadata as follows.</p>\n<code-example path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\" header=\"src/app/hero-search/hero-search.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Observable, Subject } from 'rxjs';\n\nimport {\n   debounceTime, distinctUntilChanged, switchMap\n } from 'rxjs/operators';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-search',\n  templateUrl: './hero-search.component.html',\n  <a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>: [ './hero-search.component.css' ]\n})\nexport class HeroSearchComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes$: Observable&#x3C;Hero[]>;\n  private searchTerms = new Subject&#x3C;string>();\n\n  constructor(private heroService: HeroService) {}\n\n  // Push <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/common/PlatformLocation#search\" class=\"code-anchor\">search</a> term into the observable stream.\n  <a href=\"api/common/PlatformLocation#search\" class=\"code-anchor\">search</a>(term: string): void {\n    this.searchTerms.next(term);\n  }\n\n  ngOnInit(): void {\n    this.heroes$ = this.searchTerms.pipe(\n      // wait 300ms after each keystroke before considering the term\n      debounceTime(300),\n\n      // ignore new term if same as <a href=\"api/service-worker/UpdateActivatedEvent#previous\" class=\"code-anchor\">previous</a> term\n      distinctUntilChanged(),\n\n      // switch to new <a href=\"api/common/PlatformLocation#search\" class=\"code-anchor\">search</a> observable each time the term <a href=\"api/core/QueryList#changes\" class=\"code-anchor\">changes</a>\n      switchMap((term: string) => this.heroService.searchHeroes(term)),\n    );\n  }\n}\n\n\n</code-example>\n<p>Notice the declaration of <code>heroes$</code> as an <code>Observable</code>\n<code-example path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\" region=\"heroes-stream\">\nheroes$: Observable&#x3C;Hero[]>;\n\n</code-example></p>\n<p>You'll set it in <a href=\"tutorial/toh-pt6#search-pipe\"><code>ngOnInit()</code></a>.\nBefore you do, focus on the definition of <code>searchTerms</code>.</p>\n<h3 id=\"the-searchterms-rxjs-subject\">The <em>searchTerms</em> RxJS subject<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#the-searchterms-rxjs-subject\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code>searchTerms</code> property is declared as an RxJS <code>Subject</code>.</p>\n<code-example path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\" region=\"searchTerms\">\nprivate searchTerms = new Subject&#x3C;string>();\n\n// Push <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/common/PlatformLocation#search\" class=\"code-anchor\">search</a> term into the observable stream.\n<a href=\"api/common/PlatformLocation#search\" class=\"code-anchor\">search</a>(term: string): void {\n  this.searchTerms.next(term);\n}\n\n</code-example>\n<p>A <code>Subject</code> is both a source of <em>observable</em> values and an <code>Observable</code> itself.\nYou can subscribe to a <code>Subject</code> as you would any <code>Observable</code>.</p>\n<p>You can also push values into that <code>Observable</code> by calling its <code>next(value)</code> method\nas the <code><a href=\"api/common/PlatformLocation#search\" class=\"code-anchor\">search</a>()</code> method does.</p>\n<p>The <code><a href=\"api/common/PlatformLocation#search\" class=\"code-anchor\">search</a>()</code> method is called via an <em>event binding</em> to the\ntextbox's <code>input</code> event.</p>\n<code-example path=\"toh-pt6/src/app/hero-search/hero-search.component.html\" region=\"input\">\n&#x3C;input #searchBox id=\"search-box\" (input)=\"<a href=\"api/common/PlatformLocation#search\" class=\"code-anchor\">search</a>(searchBox.value)\" />\n\n</code-example>\n<p>Every time the user types in the textbox, the binding calls <code><a href=\"api/common/PlatformLocation#search\" class=\"code-anchor\">search</a>()</code> with the textbox value, a \"search term\".\nThe <code>searchTerms</code> becomes an <code>Observable</code> emitting a steady stream of search terms.</p>\n<a id=\"search-pipe\"></a>\n<h3 id=\"chaining-rxjs-operators\">Chaining RxJS operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#chaining-rxjs-operators\"><i class=\"material-icons\">link</i></a></h3>\n<p>Passing a new search term directly to the <code>searchHeroes()</code> after every user keystroke would create an excessive amount of HTTP requests,\ntaxing server resources and burning through the cellular network data plan.</p>\n<p>Instead, the <code>ngOnInit()</code> method pipes the <code>searchTerms</code> observable through a sequence of RxJS operators that reduce the number of calls to the <code>searchHeroes()</code>,\nultimately returning an observable of timely hero search results (each a <code>Hero[]</code>).</p>\n<p>Here's the code.</p>\n<code-example path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\" region=\"search\">\nthis.heroes$ = this.searchTerms.pipe(\n  // wait 300ms after each keystroke before considering the term\n  debounceTime(300),\n\n  // ignore new term if same as <a href=\"api/service-worker/UpdateActivatedEvent#previous\" class=\"code-anchor\">previous</a> term\n  distinctUntilChanged(),\n\n  // switch to new <a href=\"api/common/PlatformLocation#search\" class=\"code-anchor\">search</a> observable each time the term <a href=\"api/core/QueryList#changes\" class=\"code-anchor\">changes</a>\n  switchMap((term: string) => this.heroService.searchHeroes(term)),\n);\n\n</code-example>\n<ul>\n<li><code>debounceTime(300)</code> waits until the flow of new string events pauses for 300 milliseconds\nbefore passing along the latest string. You'll never make requests more frequently than 300ms.</li>\n</ul>\n<ul>\n<li><code>distinctUntilChanged()</code> ensures that a request is sent only if the filter text changed.</li>\n</ul>\n<ul>\n<li><code>switchMap()</code> calls the search service for each search term that makes it through <code>debounce</code> and <code>distinctUntilChanged</code>.\nIt cancels and discards previous search observables, returning only the latest search service observable.</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p>  With the <a href=\"http://www.learnrxjs.io/operators/transformation/switchmap.html\">switchMap operator</a>,\nevery qualifying key event can trigger an <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> method call.\nEven with a 300ms pause between requests, you could have multiple HTTP requests in flight\nand they may not return in the order sent.</p>\n<p>  <code>switchMap()</code> preserves the original request order while returning only the observable from the most recent HTTP method call.\nResults from prior calls are canceled and discarded.</p>\n<p>  Note that <em>canceling</em> a previous <code>searchHeroes()</code> <em>Observable</em>\ndoesn't actually abort a pending HTTP request.\nUnwanted results are simply discarded before they reach your application code.</p>\n</div>\n<p>Remember that the component <em>class</em> does not subscribe to the <code>heroes$</code> <em>observable</em>.\nThat's the job of the <a href=\"tutorial/toh-pt6#asyncpipe\"><code>AsyncPipe</code></a> in the template.</p>\n<h4 id=\"try-it\">Try it<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#try-it\"><i class=\"material-icons\">link</i></a></h4>\n<p>Run the app again. In the <em>Dashboard</em>, enter some text in the search box.\nIf you enter characters that match any existing hero names, you'll see something like this.</p>\n<figure>\n  <img src=\"generated/images/guide/toh/toh-hero-search.png\" alt=\"Hero Search Component\" width=\"240\" height=\"224\">\n</figure>\n<h2 id=\"final-code-review\">Final code review<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#final-code-review\"><i class=\"material-icons\">link</i></a></h2>\n<p>Your app should look like this <live-example></live-example>.</p>\n<p>Here are the code files discussed on this page (all in the <code>src/app/</code> folder).</p>\n<a id=\"heroservice\"></a>\n<a id=\"inmemorydataservice\"></a>\n<a id=\"appmodule\"></a>\n<h4 id=\"heroservice-inmemorydataservice-appmodule\"><em>HeroService</em>, <em>InMemoryDataService</em>, <em>AppModule</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#heroservice-inmemorydataservice-appmodule\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n  <code-pane header=\"hero.service.ts\" path=\"toh-pt6/src/app/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>, <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { Hero } from './hero';\nimport { MessageService } from './message.service';\n\nconst httpOptions = {\n  headers: new <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a>({ 'Content-Type': 'application/json' })\n};\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({ <a href=\"api/core/Injectable#providedIn\" class=\"code-anchor\">providedIn</a>: 'root' })\nexport class HeroService {\n\n  private heroesUrl = 'api/heroes';  // <a href=\"api/core/SecurityContext#URL\" class=\"code-anchor\">URL</a> to web api\n\n  constructor(\n    private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>,\n    private messageService: MessageService) { }\n\n  /** GET heroes from the server */\n  getHeroes (): Observable&#x3C;Hero[]> {\n    return this.http.get&#x3C;Hero[]>(this.heroesUrl)\n      .pipe(\n        tap(_ => this.log('fetched heroes')),\n        catchError(this.handleError&#x3C;Hero[]>('getHeroes', []))\n      );\n  }\n\n  /** GET hero by id. Return `undefined` when id not found */\n  getHeroNo404&#x3C;<a href=\"api/router/Data\" class=\"code-anchor\">Data</a>>(id: number): Observable&#x3C;Hero> {\n    const url = `${this.heroesUrl}/?id=${id}`;\n    return this.http.get&#x3C;Hero[]>(url)\n      .pipe(\n        map(heroes => heroes[0]), // returns <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> {0|1} element array\n        tap(h => {\n          const outcome = h ? `fetched` : `did not find`;\n          this.log(`${outcome} hero id=${id}`);\n        }),\n        catchError(this.handleError&#x3C;Hero>(`getHero id=${id}`))\n      );\n  }\n\n  /** GET hero by id. Will 404 if id not found */\n  getHero(id: number): Observable&#x3C;Hero> {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get&#x3C;Hero>(url).pipe(\n      tap(_ => this.log(`fetched hero id=${id}`)),\n      catchError(this.handleError&#x3C;Hero>(`getHero id=${id}`))\n    );\n  }\n\n  /* GET heroes whose name contains <a href=\"api/common/PlatformLocation#search\" class=\"code-anchor\">search</a> term */\n  searchHeroes(term: string): Observable&#x3C;Hero[]> {\n    if (!term.trim()) {\n      // if not <a href=\"api/common/PlatformLocation#search\" class=\"code-anchor\">search</a> term, return empty hero array.\n      return of([]);\n    }\n    return this.http.get&#x3C;Hero[]>(`${this.heroesUrl}/?name=${term}`).pipe(\n      tap(_ => this.log(`found heroes matching \"${term}\"`)),\n      catchError(this.handleError&#x3C;Hero[]>('searchHeroes', []))\n    );\n  }\n\n  //////// Save methods //////////\n\n  /** POST: add <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> new hero to the server */\n  addHero (hero: Hero): Observable&#x3C;Hero> {\n    return this.http.post&#x3C;Hero>(this.heroesUrl, hero, httpOptions).pipe(\n      tap((newHero: Hero) => this.log(`added hero w/ id=${newHero.id}`)),\n      catchError(this.handleError&#x3C;Hero>('addHero'))\n    );\n  }\n\n  /** DELETE: delete the hero from the server */\n  deleteHero (hero: Hero | number): Observable&#x3C;Hero> {\n    const id = typeof hero === 'number' ? hero : hero.id;\n    const url = `${this.heroesUrl}/${id}`;\n\n    return this.http.delete&#x3C;Hero>(url, httpOptions).pipe(\n      tap(_ => this.log(`deleted hero id=${id}`)),\n      catchError(this.handleError&#x3C;Hero>('deleteHero'))\n    );\n  }\n\n  /** PUT: <a href=\"api/forms/NgModel#update\" class=\"code-anchor\">update</a> the hero on the server */\n  updateHero (hero: Hero): Observable&#x3C;any> {\n    return this.http.put(this.heroesUrl, hero, httpOptions).pipe(\n      tap(_ => this.log(`updated hero id=${hero.id}`)),\n      catchError(this.handleError&#x3C;any>('updateHero'))\n    );\n  }\n\n  /**\n   * Handle <a href=\"api/http/Http\" class=\"code-anchor\">Http</a> operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - <a href=\"api/animations/AnimationQueryOptions#optional\" class=\"code-anchor\">optional</a> value to return as the observable result\n   */\n  private handleError&#x3C;T> (operation = 'operation', result?: T) {\n    return (error: any): Observable&#x3C;T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // <a href=\"api/animations/browser/testing/MockAnimationDriver#log\" class=\"code-anchor\">log</a> to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  /** Log <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> HeroService <a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a> with the MessageService */\n  private <a href=\"api/animations/browser/testing/MockAnimationDriver#log\" class=\"code-anchor\">log</a>(<a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a>: string) {\n    this.messageService.add(`HeroService: ${<a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a>}`);\n  }\n}\n\n\n</code-pane>\n  <code-pane header=\"in-memory-data.service.ts\" path=\"toh-pt6/src/app/in-memory-data.service.ts\">\nimport { InMemoryDbService } from 'angular-in-memory-web-api';\nimport { Hero } from './hero';\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  <a href=\"api/core/Injectable#providedIn\" class=\"code-anchor\">providedIn</a>: 'root',\n})\nexport class InMemoryDataService implements InMemoryDbService {\n  createDb() {\n    const heroes = [\n      { id: 11, name: 'Mr. Nice' },\n      { id: 12, name: 'Narco' },\n      { id: 13, name: 'Bombasto' },\n      { id: 14, name: 'Celeritas' },\n      { id: 15, name: 'Magneta' },\n      { id: 16, name: 'RubberMan' },\n      { id: 17, name: 'Dynama' },\n      { id: 18, name: 'Dr IQ' },\n      { id: 19, name: 'Magma' },\n      { id: 20, name: 'Tornado' }\n    ];\n    return {heroes};\n  }\n\n  // Overrides the genId method to ensure that <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> hero always has an id.\n  // If the heroes array is empty,\n  // the method below returns the initial number (11).\n  // if the heroes array is not empty, the method below returns the highest\n  // hero id + 1.\n  genId(heroes: Hero[]): number {\n    return heroes.length > 0 ? Math.max(...heroes.map(hero => hero.id)) + 1 : 11;\n  }\n}\n\n\n</code-pane>\n  <code-pane header=\"app.module.ts\" path=\"toh-pt6/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }       from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }  from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }    from '@angular/forms';\nimport { <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a> }    from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\nimport { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';\nimport { InMemoryDataService }  from './in-memory-data.service';\n\nimport { AppRoutingModule }     from './app-routing.module';\n\nimport { AppComponent }         from './app.component';\nimport { DashboardComponent }   from './dashboard/dashboard.component';\nimport { HeroDetailComponent }  from './hero-detail/hero-detail.component';\nimport { HeroesComponent }      from './heroes/heroes.component';\nimport { HeroSearchComponent }  from './hero-search/hero-search.component';\nimport { MessagesComponent }    from './<a href=\"api/service-worker/SwPush#messages\" class=\"code-anchor\">messages</a>/messages.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  <a href=\"api/core/NgModule#imports\" class=\"code-anchor\">imports</a>: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    AppRoutingModule,\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n\n    // The HttpClientInMemoryWebApiModule module intercepts HTTP requests\n    // and returns simulated server responses.\n    // Remove it when <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> real server is ready to receive requests.\n    HttpClientInMemoryWebApiModule.forRoot(\n      InMemoryDataService, { dataEncapsulation: false }\n    )\n  ],\n  <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [\n    AppComponent,\n    DashboardComponent,\n    HeroesComponent,\n    HeroDetailComponent,\n    MessagesComponent,\n    HeroSearchComponent\n  ],\n  <a href=\"api/core/NgModule#bootstrap\" class=\"code-anchor\">bootstrap</a>: [ AppComponent ]\n})\nexport class AppModule { }\n\n</code-pane>\n</code-tabs>\n<a id=\"heroescomponent\"></a>\n<h4 id=\"heroescomponent\"><em>HeroesComponent</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#heroescomponent\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n  <code-pane header=\"heroes/heroes.component.html\" path=\"toh-pt6/src/app/heroes/heroes.component.html\">\n&#x3C;h2>My Heroes&#x3C;/h2>\n\n&#x3C;div>\n  &#x3C;label>Hero name:\n    &#x3C;input #heroName />\n  &#x3C;/label>\n  &#x3C;!-- (click) passes input value to add() and then clears the input -->\n  &#x3C;button (click)=\"add(heroName.value); heroName.value=''\">\n    add\n  &#x3C;/button>\n&#x3C;/div>\n\n&#x3C;ul class=\"heroes\">\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">\n    &#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\">\n      &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n    &#x3C;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>>\n    &#x3C;button class=\"delete\" title=\"delete hero\"\n      (click)=\"delete(hero)\">x&#x3C;/button>\n  &#x3C;/li>\n&#x3C;/ul>\n\n\n</code-pane>\n  <code-pane header=\"heroes/heroes.component.ts\" path=\"toh-pt6/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  <a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit() {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n    .subscribe(heroes => this.heroes = heroes);\n  }\n\n  add(name: string): void {\n    name = name.trim();\n    if (!name) { return; }\n    this.heroService.addHero({ name } as Hero)\n      .subscribe(hero => {\n        this.heroes.push(hero);\n      });\n  }\n\n  delete(hero: Hero): void {\n    this.heroes = this.heroes.filter(h => h !== hero);\n    this.heroService.deleteHero(hero).subscribe();\n  }\n\n}\n\n\n</code-pane>\n  <code-pane header=\"heroes/heroes.component.css\" path=\"toh-pt6/src/app/heroes/heroes.component.css\">\n/* HeroesComponent's private CSS styles */\n.heroes {\n  margin: 0 0 2em 0;\n  list-style-type: none;\n  padding: 0;\n  width: 15em;\n}\n.heroes li {\n  <a href=\"api/router/Scroll#position\" class=\"code-anchor\">position</a>: relative;\n  cursor: pointer;\n  background-color: #EEE;\n  margin: .5em;\n  padding: .3em 0;\n  height: 1.6em;\n  border-radius: 4px;\n}\n\n.heroes li:hover {\n  color: #607D8B;\n  background-color: #DDD;\n  left: .1em;\n}\n\n.heroes <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> {\n  color: #888;\n  text-decoration: none;\n  <a href=\"api/router/Scroll#position\" class=\"code-anchor\">position</a>: relative;\n  display: block;\n  width: 250px;\n}\n\n.heroes <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>:hover {\n  color:#607D8B;\n}\n\n.heroes .badge {\n  display: inline-block;\n  font-size: small;\n  color: white;\n  padding: 0.8em 0.7em 0 0.7em;\n  background-color: #607D8B;\n  line-height: 1em;\n  <a href=\"api/router/Scroll#position\" class=\"code-anchor\">position</a>: relative;\n  left: -1px;\n  top: -4px;\n  height: 1.8em;\n  min-width: 16px;\n  text-align: right;\n  margin-right: .8em;\n  border-radius: 4px 0 0 4px;\n}\n\nbutton {\n  background-color: #eee;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 4px;\n  cursor: pointer;\n  cursor: hand;\n  font-family: Arial;\n}\n\nbutton:hover {\n  background-color: #cfd8dc;\n}\n\nbutton.delete {\n  <a href=\"api/router/Scroll#position\" class=\"code-anchor\">position</a>: relative;\n  left: 194px;\n  top: -32px;\n  background-color: gray !important;\n  color: white;\n}\n\n\n\n</code-pane>\n</code-tabs>\n<a id=\"herodetailcomponent\"></a>\n<h4 id=\"herodetailcomponent\"><em>HeroDetailComponent</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#herodetailcomponent\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n  <code-pane header=\"hero-detail/hero-detail.component.html\" path=\"toh-pt6/src/app/hero-detail/hero-detail.component.html\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\">\n  &#x3C;h2>{{hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&#x3C;/h2>\n  &#x3C;div>&#x3C;span>id: &#x3C;/span>{{hero.id}}&#x3C;/div>\n  &#x3C;div>\n    &#x3C;label>name:\n      &#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"/>\n    &#x3C;/label>\n  &#x3C;/div>\n  &#x3C;button (click)=\"goBack()\">go back&#x3C;/button>\n  &#x3C;button (click)=\"save()\">save&#x3C;/button>\n&#x3C;/div>\n\n\n</code-pane>\n  <code-pane header=\"hero-detail/hero-detail.component.ts\" path=\"toh-pt6/src/app/hero-detail/hero-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\nimport { <a href=\"api/common/Location\" class=\"code-anchor\">Location</a> } from '@angular/common';\n\nimport { Hero }         from '../hero';\nimport { HeroService }  from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-detail',\n  templateUrl: './hero-detail.component.html',\n  <a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>: [ './hero-detail.component.css' ]\n})\nexport class HeroDetailComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    private heroService: HeroService,\n    private <a href=\"api/core/ComponentRef#location\" class=\"code-anchor\">location</a>: <a href=\"api/common/Location\" class=\"code-anchor\">Location</a>\n  ) {}\n\n  ngOnInit(): void {\n    this.getHero();\n  }\n\n  getHero(): void {\n    const id = +this.route.snapshot.paramMap.get('id');\n    this.heroService.getHero(id)\n      .subscribe(hero => this.hero = hero);\n  }\n\n  goBack(): void {\n    this.location.back();\n  }\n\n save(): void {\n    this.heroService.updateHero(this.hero)\n      .subscribe(() => this.goBack());\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<a id=\"dashboardcomponent\"></a>\n<h4 id=\"dashboardcomponent\"><em>DashboardComponent</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#dashboardcomponent\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n  <code-pane header=\"src/app/dashboard/dashboard.component.html\" path=\"toh-pt6/src/app/dashboard/dashboard.component.html\">\n&#x3C;h3>Top Heroes&#x3C;/h3>\n&#x3C;div class=\"grid grid-pad\">\n  &#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" class=\"col-1-4\"\n      <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\">\n    &#x3C;div class=\"module hero\">\n      &#x3C;h4>{{hero.name}}&#x3C;/h4>\n    &#x3C;/div>\n  &#x3C;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>>\n&#x3C;/div>\n\n&#x3C;app-hero-search>&#x3C;/app-hero-search>\n\n\n</code-pane>\n</code-tabs>\n<a id=\"herosearchcomponent\"></a>\n<h4 id=\"herosearchcomponent\"><em>HeroSearchComponent</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#herosearchcomponent\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n  <code-pane header=\"hero-search/hero-search.component.html\" path=\"toh-pt6/src/app/hero-search/hero-search.component.html\">\n&#x3C;div id=\"search-component\">\n  &#x3C;h4>Hero Search&#x3C;/h4>\n\n  &#x3C;input #searchBox id=\"search-box\" (input)=\"<a href=\"api/common/PlatformLocation#search\" class=\"code-anchor\">search</a>(searchBox.value)\" />\n\n  &#x3C;ul class=\"search-result\">\n    &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes$ | <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>\" >\n      &#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\">\n        {{hero.name}}\n      &#x3C;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>>\n    &#x3C;/li>\n  &#x3C;/ul>\n&#x3C;/div>\n\n\n</code-pane>\n  <code-pane header=\"hero-search/hero-search.component.ts\" path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Observable, Subject } from 'rxjs';\n\nimport {\n   debounceTime, distinctUntilChanged, switchMap\n } from 'rxjs/operators';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-search',\n  templateUrl: './hero-search.component.html',\n  <a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>: [ './hero-search.component.css' ]\n})\nexport class HeroSearchComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes$: Observable&#x3C;Hero[]>;\n  private searchTerms = new Subject&#x3C;string>();\n\n  constructor(private heroService: HeroService) {}\n\n  // Push <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/common/PlatformLocation#search\" class=\"code-anchor\">search</a> term into the observable stream.\n  <a href=\"api/common/PlatformLocation#search\" class=\"code-anchor\">search</a>(term: string): void {\n    this.searchTerms.next(term);\n  }\n\n  ngOnInit(): void {\n    this.heroes$ = this.searchTerms.pipe(\n      // wait 300ms after each keystroke before considering the term\n      debounceTime(300),\n\n      // ignore new term if same as <a href=\"api/service-worker/UpdateActivatedEvent#previous\" class=\"code-anchor\">previous</a> term\n      distinctUntilChanged(),\n\n      // switch to new <a href=\"api/common/PlatformLocation#search\" class=\"code-anchor\">search</a> observable each time the term <a href=\"api/core/QueryList#changes\" class=\"code-anchor\">changes</a>\n      switchMap((term: string) => this.heroService.searchHeroes(term)),\n    );\n  }\n}\n\n\n</code-pane>\n  <code-pane header=\"hero-search/hero-search.component.css\" path=\"toh-pt6/src/app/hero-search/hero-search.component.css\">\n/* HeroSearch private styles */\n.search-result li {\n  border-bottom: 1px solid gray;\n  border-left: 1px solid gray;\n  border-right: 1px solid gray;\n  width: 195px;\n  height: 16px;\n  padding: 5px;\n  background-color: white;\n  cursor: pointer;\n  list-style-type: none;\n}\n\n.search-result li:hover {\n  background-color: #607D8B;\n}\n\n.search-result li <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> {\n  color: #888;\n  display: block;\n  text-decoration: none;\n}\n\n.search-result li <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>:hover {\n  color: white;\n}\n.search-result li <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>:active {\n  color: white;\n}\n#search-box {\n  width: 200px;\n  height: 20px;\n}\n\n\nul.search-result {\n  margin-top: 0;\n  padding-left: 0;\n}\n\n\n</code-pane>\n</code-tabs>\n<h2 id=\"summary\">Summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#summary\"><i class=\"material-icons\">link</i></a></h2>\n<p>You're at the end of your journey, and you've accomplished a lot.</p>\n<ul>\n<li>You added the necessary dependencies to use HTTP in the app.</li>\n<li>You refactored <code>HeroService</code> to load heroes from a web API.</li>\n<li>You extended <code>HeroService</code> to support <code>post()</code>, <code>put()</code>, and <code>delete()</code> methods.</li>\n<li>You updated the components to allow adding, editing, and deleting of heroes.</li>\n<li>You configured an in-memory web API.</li>\n<li>You learned how to use observables.</li>\n</ul>\n<p>This concludes the \"Tour of Heroes\" tutorial.\nYou're ready to learn more about Angular development in the fundamentals section,\nstarting with the <a href=\"guide/architecture\" title=\"Architecture\">Architecture</a> guide.</p>\n\n</div>\n\n<!-- links to this doc:\n - tutorial/toh-pt4\n-->\n<!-- links from this doc:\n - api/animations/AnimationQueryOptions#optional\n - api/animations/browser/testing/MockAnimationDriver#log\n - api/common/AsyncPipe\n - api/common/Location\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/PlatformLocation#search\n - api/common/UpperCasePipe\n - api/common/http\n - api/common/http/HttpClient\n - api/common/http/HttpClient#get\n - api/common/http/HttpClient#post\n - api/common/http/HttpClient#put\n - api/common/http/HttpClientModule\n - api/common/http/HttpErrorResponse#message\n - api/common/http/HttpHeaders\n - api/core/Component\n - api/core/Component#styleUrls\n - api/core/ComponentRef#location\n - api/core/ErrorHandler#handleError\n - api/core/Injectable\n - api/core/Injectable#providedIn\n - api/core/Input\n - api/core/NgModule\n - api/core/NgModule#bootstrap\n - api/core/NgModule#declarations\n - api/core/NgModule#imports\n - api/core/OnInit\n - api/core/QueryList#changes\n - api/core/SecurityContext#URL\n - api/core/testing/async\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/forms/NgModel#update\n - api/http/Http\n - api/platform-browser/BrowserModule\n - api/router/ActivatedRoute\n - api/router/Data\n - api/router/RouterLink\n - api/router/RouterLinkWithHref\n - api/router/RouterModule#forRoot\n - api/router/Scroll#position\n - api/service-worker/SwPush#messages\n - api/service-worker/UpdateActivatedEvent#previous\n - guide/architecture\n - tutorial/toh-pt6#add-a-new-hero\n - tutorial/toh-pt6#add-heroserviceaddhero\n - tutorial/toh-pt6#add-heroservicedeletehero\n - tutorial/toh-pt6#add-heroserviceupdatehero\n - tutorial/toh-pt6#add-search-to-the-dashboard\n - tutorial/toh-pt6#asyncpipe\n - tutorial/toh-pt6#chaining-rxjs-operators\n - tutorial/toh-pt6#create-herosearchcomponent\n - tutorial/toh-pt6#dashboardcomponent\n - tutorial/toh-pt6#delete-a-hero\n - tutorial/toh-pt6#enable-http-services\n - tutorial/toh-pt6#error-handling\n - tutorial/toh-pt6#final-code-review\n - tutorial/toh-pt6#fix-the-herosearchcomponent-class\n - tutorial/toh-pt6#get-hero-by-id\n - tutorial/toh-pt6#get-heroes-with-httpclient\n - tutorial/toh-pt6#handleerror\n - tutorial/toh-pt6#herodetailcomponent\n - tutorial/toh-pt6#heroes-and-http\n - tutorial/toh-pt6#heroescomponent\n - tutorial/toh-pt6#herosearchcomponent\n - tutorial/toh-pt6#heroservice-inmemorydataservice-appmodule\n - tutorial/toh-pt6#heroservicesearchheroes\n - tutorial/toh-pt6#http\n - tutorial/toh-pt6#http-methods-return-one-value\n - tutorial/toh-pt6#httpclientget-returns-response-data\n - tutorial/toh-pt6#import-heroes\n - tutorial/toh-pt6#search-by-name\n - tutorial/toh-pt6#search-pipe\n - tutorial/toh-pt6#simulate-a-data-server\n - tutorial/toh-pt6#summary\n - tutorial/toh-pt6#tap-into-the-observable\n - tutorial/toh-pt6#the-searchterms-rxjs-subject\n - tutorial/toh-pt6#try-it\n - tutorial/toh-pt6#update-heroes\n - http://www.learnrxjs.io/operators/transformation/switchmap.html\n - https://github.com/angular/angular/edit/master/aio/content/tutorial/toh-pt6.md?message=docs%3A%20describe%20your%20change...\n - https://github.com/angular/in-memory-web-api\n-->"
}
{
  "id": "guide/universal",
  "title": "Server-side Rendering (SSR): An intro to Angular Universal",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/universal.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"server-side-rendering-ssr-an-intro-to-angular-universal\">Server-side Rendering (SSR): An intro to Angular Universal<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/universal#server-side-rendering-ssr-an-intro-to-angular-universal\"><i class=\"material-icons\">link</i></a></h1>\n<p>This guide describes <strong>Angular Universal</strong>, a technology that renders Angular applications on the server.</p>\n<p>A normal Angular application executes in the <em>browser</em>, rendering pages in the DOM in response to user actions.\nAngular Universal executes on the <em>server</em>, generating <em>static</em> application pages that later get bootstrapped on\nthe client. This means that the application generally renders more quickly, giving users a chance to view the application\nlayout before it becomes fully interactive.</p>\n<p>For a more detailed look at different techniques and concepts surrounding SSR, please check out this\n<a href=\"https://developers.google.com/web/updates/2019/02/rendering-on-the-web\">article</a>.</p>\n<p>You can easily prepare an app for server-side rendering using the <a href=\"guide/glossary#cli\">Angular CLI</a>.\nThe CLI schematic <code>@nguniversal/express-engine</code> performs the required steps, as described below.</p>\n<div class=\"alert is-helpful\">\n<p>  <strong>Note:</strong> <a href=\"generated/zips/universal/universal.zip\">Download the finished sample code</a>,\nwhich runs in a <a href=\"https://expressjs.com/\">Node.jsÂ® Express</a> server.</p>\n</div>\n<a id=\"the-example\"></a>\n<h2 id=\"universal-tutorial\">Universal tutorial<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/universal#universal-tutorial\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <a href=\"tutorial\">Tour of Heroes tutorial</a> is the foundation for this walkthrough. </p>\n<p>In this example, the Angular CLI compiles and bundles the Universal version of the app with the\n<a href=\"guide/aot-compiler\">Ahead-of-Time (AoT) compiler</a>.\nA Node Express web server compiles HTML pages with Universal based on client requests.</p>\n<p>To create the server-side app module, <code>app.server.module.ts</code>, run the following CLI command.</p>\n<code-example format=\".\" language=\"bash\">\n\nng add @nguniversal/express-engine --clientProject angular.io-example\n\n</code-example>\n<p>The command creates the following folder structure.</p>\n<code-example format=\".\" language=\"none\" linenums=\"false\">\nsrc/\n  index.html                 <i>app web page</i>\n  main.ts                    <i>bootstrapper for client app</i>\n  main.server.ts             <i>* bootstrapper for server app</i>\n  style.css                  <i>styles for the app</i>\n  app/ ...                   <i>application code</i>\n    app.server.module.ts     <i>* server-side application module</i>\nserver.ts                    <i>* express web server</i>\ntsconfig.json                <i>TypeScript client configuration</i>\ntsconfig.app.json            <i>TypeScript client configuration</i>\ntsconfig.server.json         <i>* TypeScript server configuration</i>\ntsconfig.spec.json           <i>TypeScript spec configuration</i>\npackage.json                 <i>npm configuration</i>\nwebpack.server.config.js     <i>* webpack server configuration</i>\n</code-example>\n<p>The files marked with <code>*</code> are new and not in the original tutorial sample.</p>\n<h3 id=\"universal-in-action\">Universal in action<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/universal#universal-in-action\"><i class=\"material-icons\">link</i></a></h3>\n<p>To start rendering your app with Universal on your local system, use the following command.</p>\n<code-example format=\".\" language=\"bash\" linenums=\"false\">\nnpm run build:ssr &#x26;&#x26; npm run serve:ssr\n</code-example>\n<p>Open a browser and navigate to <a href=\"http://localhost:4000/\">http://localhost:4000/</a>.\nYou should see the familiar Tour of Heroes dashboard page.</p>\n<p>Navigation via <code>routerLinks</code> works correctly because they use the native anchor (<code>&#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>></code>) tags.\nYou can go from the Dashboard to the Heroes page and back.\nYou can click a hero on the Dashboard page to display its Details page.</p>\n<p>If you throttle your network speed so that the client-side scripts take longer to download (instructions below),\nyou'll notice:</p>\n<ul>\n<li>Clicking a hero on the Heroes page does nothing.</li>\n<li>You can't add or delete a hero.</li>\n<li>The search box on the Dashboard page is ignored.</li>\n<li>The <em>Back</em> and <em>Save</em> buttons on the Details page don't work.</li>\n</ul>\n<p>User events other than <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> clicks aren't supported.\nYou must wait for the full client app to bootstrap and run, or buffer the events using libraries like\n<a href=\"https://github.com/angular/preboot\">preboot</a>, which allow you to replay these events once the client-side scripts load.</p>\n<p>The transition from the server-rendered app to the client app happens quickly on a development machine, but you should\nalways test your apps in real-world scenarios.</p>\n<p>You can simulate a slower network to see the transition more clearly as follows:</p>\n<ol>\n<li>Open the Chrome Dev Tools and go to the Network tab.</li>\n<li>Find the <a href=\"https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#throttling\">Network Throttling</a>\ndropdown on the far right of the menu bar.</li>\n<li>Try one of the \"3G\" speeds.</li>\n</ol>\n<p>The server-rendered app still launches quickly but the full client app may take seconds to load.</p>\n<a id=\"why-do-it\"></a>\n<h2 id=\"why-use-server-side-rendering\">Why use server-side rendering?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/universal#why-use-server-side-rendering\"><i class=\"material-icons\">link</i></a></h2>\n<p>There are three main reasons to create a Universal version of your app.</p>\n<ol>\n<li>Facilitate web crawlers through <a href=\"https://static.googleusercontent.com/media/www.google.com/en//webmasters/docs/search-engine-optimization-starter-guide.pdf\">search engine optimization (SEO)</a></li>\n<li>Improve performance on mobile and low-powered devices</li>\n<li>Show the first page quickly with a <a href=\"https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint\">first-contentful paint (FCP)</a></li>\n</ol>\n<a id=\"seo\"></a>\n<a id=\"web-crawlers\"></a>\n<h3 id=\"facilitate-web-crawlers-seo\">Facilitate web crawlers (SEO)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/universal#facilitate-web-crawlers-seo\"><i class=\"material-icons\">link</i></a></h3>\n<p>Google, Bing, Facebook, Twitter, and other social media sites rely on web crawlers to index your application content and\nmake that content searchable on the web.\nThese web crawlers may be unable to navigate and index your highly interactive Angular application as a human user could do.</p>\n<p>Angular Universal can generate a static version of your app that is easily searchable, linkable, and navigable without JavaScript.\nUniversal also makes a site preview available since each URL returns a fully rendered page.</p>\n<a id=\"no-javascript\"></a>\n<h3 id=\"improve-performance-on-mobile-and-low-powered-devices\">Improve performance on mobile and low-powered devices<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/universal#improve-performance-on-mobile-and-low-powered-devices\"><i class=\"material-icons\">link</i></a></h3>\n<p>Some devices don't support JavaScript or execute JavaScript so poorly that the user experience is unacceptable.\nFor these cases, you may require a server-rendered, no-JavaScript version of the app.\nThis version, however limited, may be the only practical alternative for\npeople who otherwise couldn't use the app at all.</p>\n<a id=\"startup-performance\"></a>\n<h3 id=\"show-the-first-page-quickly\">Show the first page quickly<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/universal#show-the-first-page-quickly\"><i class=\"material-icons\">link</i></a></h3>\n<p>Displaying the first page quickly can be critical for user engagement.\n<a href=\"https://www.thinkwithgoogle.com/marketing-resources/data-measurement/mobile-page-speed-new-industry-benchmarks/\">53 percent of mobile site visits are abandoned</a>\nif pages take longer than 3 seconds to load.\nYour app may have to launch faster to engage these users before they decide to do something else.</p>\n<p>With Angular Universal, you can generate landing pages for the app that look like the complete app.\nThe pages are pure HTML, and can display even if JavaScript is disabled.\nThe pages don't handle browser events, but they <em>do</em> support navigation through the site using <a href=\"guide/router#router-link\"><code>routerLink</code></a>.</p>\n<p>In practice, you'll serve a static version of the landing page to hold the user's attention.\nAt the same time, you'll load the full Angular app behind it.\nThe user perceives near-instant performance from the landing page\nand gets the full interactive experience after the full app loads.</p>\n<a id=\"how-does-it-work\"></a>\n<h2 id=\"universal-web-servers\">Universal web servers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/universal#universal-web-servers\"><i class=\"material-icons\">link</i></a></h2>\n<p>A Universal web server responds to application page requests with static HTML rendered by the <a href=\"guide/universal#universal-engine\">Universal template engine</a>.\nThe server receives and responds to HTTP requests from clients (usually browsers), and serves static assets such as scripts, CSS, and images.\nIt may respond to data requests, either directly or as a proxy to a separate data server.</p>\n<p>The sample web server for this guide is based on the popular <a href=\"https://expressjs.com/\">Express</a> framework.</p>\n<div class=\"alert is-helpful\">\n<p>  <strong>Note:</strong> <em>Any</em> web server technology can serve a Universal app as long as it can call Universal's <code><a href=\"api/platform-server/renderModuleFactory\" class=\"code-anchor\">renderModuleFactory</a>()</code> function.\nThe principles and decision points discussed here apply to any web server technology.</p>\n</div>\n<p>Universal applications use the Angular <code>platform-server</code> package (as opposed to <code>platform-browser</code>), which provides\nserver implementations of the DOM, <code>XMLHttpRequest</code>, and other low-level features that don't rely on a browser.</p>\n<p>The server (<a href=\"https://expressjs.com/\">Node Express</a> in this guide's example)\npasses client requests for application pages to the NgUniversal <code>ngExpressEngine</code>. Under the hood, this\ncalls Universal's <code><a href=\"api/platform-server/renderModuleFactory\" class=\"code-anchor\">renderModuleFactory</a>()</code> function, while providing caching and other helpful utilities.</p>\n<p>The <code><a href=\"api/platform-server/renderModuleFactory\" class=\"code-anchor\">renderModuleFactory</a>()</code> function takes as inputs a <em>template</em> HTML page (usually <code>index.html</code>),\nan Angular <em>module</em> containing components,\nand a <em>route</em> that determines which components to display.\nThe route comes from the client's request to the server.</p>\n<p>Each request results in the appropriate view for the requested route.\nThe <code><a href=\"api/platform-server/renderModuleFactory\" class=\"code-anchor\">renderModuleFactory</a>()</code> function renders the view within the <code>&#x3C;app></code> tag of the template,\ncreating a finished HTML page for the client. </p>\n<p>Finally, the server returns the rendered page to the client.</p>\n<h3 id=\"working-around-the-browser-apis\">Working around the browser APIs<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/universal#working-around-the-browser-apis\"><i class=\"material-icons\">link</i></a></h3>\n<p>Because a Universal app doesn't execute in the browser, some of the browser APIs and capabilities may be missing on the server.</p>\n<p>For example, server-side applications can't reference browser-only global objects such as <code>window</code>, <code><a href=\"api/platform-server/PlatformConfig#document\" class=\"code-anchor\">document</a></code>, <code>navigator</code>, or <code><a href=\"api/core/ComponentRef#location\" class=\"code-anchor\">location</a></code>. </p>\n<p>Angular provides some injectable abstractions over these objects, such as <a href=\"api/common/Location\"><code>Location</code></a>\nor <a href=\"api/common/DOCUMENT\"><code>DOCUMENT</code></a>; it may substitute adequately for these APIs.\nIf Angular doesn't provide it, it's possible to write new abstractions that delegate to the browser APIs while in the browser\nand to an alternative implementation while on the server (aka shimming).</p>\n<p>Similarly, without mouse or keyboard events, a server-side app can't rely on a user clicking a button to show a component.\nThe app must determine what to render based solely on the incoming client request.\nThis is a good argument for making the app <a href=\"guide/router\">routable</a>.</p>\n<a id=\"http-urls\"></a>\n<h3 id=\"using-absolute-urls-for-server-requests\">Using absolute URLs for server requests<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/universal#using-absolute-urls-for-server-requests\"><i class=\"material-icons\">link</i></a></h3>\n<p>The tutorial's <code>HeroService</code> and <code>HeroSearchService</code> delegate to the Angular <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> module to fetch application data.\nThese services send requests to <em>relative</em> URLs such as <code>api/heroes</code>.\nIn a Universal app, HTTP URLs must be <em>absolute</em> (for example, <code>https://my-server.com/api/heroes</code>).\nThis means you need to change your services to make requests with absolute URLs when running on the server and with relative\nURLs when running in the browser.</p>\n<p>One solution is to provide the full URL to your application on the server, and write an interceptor that can retrieve this\nvalue and prepend it to the request URL. If you're using the <code>ngExpressEngine</code>, as shown in the example in this guide, half\nthe work is already done. We'll assume this is the case, but it's trivial to provide the same functionality.</p>\n<p>Start by creating an <a href=\"api/common/http/HttpInterceptor\">HttpInterceptor</a>:</p>\n<code-example format=\".\" language=\"typescript\">\n\nimport {<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>, <a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>, <a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>} from '@angular/core';\nimport {<a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a>, <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a>, <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>, <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a>} from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\nimport {<a href=\"api/http/Request\" class=\"code-anchor\">Request</a>} from 'express';\nimport {REQUEST} from '@nguniversal/express-engine/tokens';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class UniversalInterceptor implements <a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a> {\n\n  constructor(@<a href=\"api/core/Optional\" class=\"code-anchor\">Optional</a>() @<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>(REQUEST) protected request: <a href=\"api/http/Request\" class=\"code-anchor\">Request</a>) {}\n\n  intercept(req: <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a><any>, next: HttpHandler) {\n    let serverReq: HttpRequest<any> = req;\n    if (this.request) {\n      let newUrl = `${this.request.protocol}://${this.request.get('host')}`;\n      if (!req.url.startsWith('/')) {\n        newUrl += '/';\n      }\n      newUrl += req.url;\n      serverReq = req.clone({url: newUrl});\n    }\n    return next.handle(serverReq);\n  }\n}\n\n</any></any></code-example>\n<p>Next, provide the interceptor in the providers for the server <code>AppModule</code> (app.server.module.ts):</p>\n<code-example format=\".\" language=\"typescript\">\n\nimport {<a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a>} from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\nimport {UniversalInterceptor} from './universal-interceptor';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  ...\n  providers: [{\n    provide: <a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a>,\n    useClass: UniversalInterceptor,\n    multi: true\n  }],\n})\nexport class AppServerModule {}\n\n</code-example>\n<p>Now, on every HTTP request made on the server, this interceptor will fire and replace the request URL with the absolute\nURL provided in the Express <code><a href=\"api/http/Request\" class=\"code-anchor\">Request</a></code> object.</p>\n<a id=\"universal-engine\"></a>\n<h3 id=\"universal-template-engine\">Universal template engine<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/universal#universal-template-engine\"><i class=\"material-icons\">link</i></a></h3>\n<p>The important bit in the <code>server.ts</code> file is the <code>ngExpressEngine()</code> function.</p>\n<code-example path=\"universal/server.ts\" header=\"server.ts\" region=\"ngExpressEngine\">\napp.engine('html', ngExpressEngine({\n  <a href=\"api/core/NgModule#bootstrap\" class=\"code-anchor\">bootstrap</a>: AppServerModuleNgFactory,\n  providers: [\n    provideModuleMap(LAZY_MODULE_MAP)\n  ]\n}));\n\n</code-example>\n<p>The <code>ngExpressEngine()</code> function is a wrapper around Universal's <code><a href=\"api/platform-server/renderModuleFactory\" class=\"code-anchor\">renderModuleFactory</a>()</code> function which turns a client's\nrequests into server-rendered HTML pages.</p>\n<ul>\n<li>\n<p>The first parameter is <code>AppServerModule</code>.\nIt's the bridge between the Universal server-side renderer and the Angular application.</p>\n</li>\n<li>\n<p>The second parameter, <code>extraProviders</code>, is optional. It lets you specify dependency providers that apply only when\nrunning on this server.\nYou can do this when your app needs information that can only be determined by the currently running server instance.\nOne example could be the running server's <em>origin</em>, which could be used to <a href=\"guide/universal#http-urls\">calculate absolute HTTP URLs</a> if\nnot using the <code><a href=\"api/http/Request\" class=\"code-anchor\">Request</a></code> token as shown above.</p>\n</li>\n</ul>\n<p>The <code>ngExpressEngine()</code> function returns a <code>Promise</code> callback that resolves to the rendered page.\nIt's up to the engine to decide what to do with that page.\nThis engine's <code>Promise</code> callback returns the rendered page to the web server,\nwhich then forwards it to the client in the HTTP response.</p>\n<div class=\"alert is-helpful\">\n<p>  <strong>Note:</strong>  These wrappers help hide the complexity of the <code><a href=\"api/platform-server/renderModuleFactory\" class=\"code-anchor\">renderModuleFactory</a>()</code> function. There are more wrappers\nfor different backend technologies at the <a href=\"https://github.com/angular/universal\">Universal repository</a>.</p>\n</div>\n<h3 id=\"filtering-request-urls\">Filtering request URLs<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/universal#filtering-request-urls\"><i class=\"material-icons\">link</i></a></h3>\n<p>NOTE: the basic behavior described below is handled automatically when using the NgUniversal Express schematic, this\nis helpful when trying to understand the underlying behavior or replicate it without using the schematic.</p>\n<p>The web server must distinguish <em>app page requests</em> from other kinds of requests.</p>\n<p>It's not as simple as intercepting a request to the root address <code>/</code>.\nThe browser could ask for one of the application routes such as <code>/dashboard</code>, <code>/heroes</code>, or <code>/detail:12</code>.\nIn fact, if the app were only rendered by the server, <em>every</em> app link clicked would arrive at the server\nas a navigation URL intended for the router.</p>\n<p>Fortunately, application routes have something in common: their URLs lack file extensions.\n(Data requests also lack extensions but they're easy to recognize because they always begin with <code>/api</code>.)\nAll static asset requests have a file extension (such as <code>main.js</code> or <code>/node_modules/zone.js/dist/zone.js</code>).</p>\n<p>Because we use routing, we can easily recognize the three types of requests and handle them differently.</p>\n<ol>\n<li><strong>Data request</strong>: request URL that begins <code>/api</code>.</li>\n<li><strong>App navigation</strong>: request URL with no file extension.</li>\n<li><strong>Static asset</strong>: all other requests.</li>\n</ol>\n<p>A Node Express server is a pipeline of middleware that filters and processes requests one after the other.\nYou configure the Node Express server pipeline with calls to <code>app.get()</code> like this one for data requests.</p>\n<code-example path=\"universal/server.ts\" header=\"server.ts (data URL)\" region=\"data-request\" linenums=\"false\">\n// TODO: implement data requests securely\napp.get('/api/*', (req, res) => {\n  res.status(404).send('data requests are not supported');\n});\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>  <strong>Note:</strong> This sample server doesn't handle data requests.</p>\n<p>  The tutorial's \"in-memory web API\" module, a demo and development tool, intercepts all HTTP calls and\nsimulates the behavior of a remote data server.\nIn practice, you would remove that module and register your web API middleware on the server here.</p>\n</div>\n<p>The following code filters for request URLs with no extensions and treats them as navigation requests.</p>\n<code-example path=\"universal/server.ts\" header=\"server.ts (navigation)\" region=\"navigation-request\" linenums=\"false\">\n// All regular routes use the Universal engine\napp.get('*', (req, res) => {\n  res.render('index', { req });\n});\n\n</code-example>\n<h3 id=\"serving-static-files-safely\">Serving static files safely<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/universal#serving-static-files-safely\"><i class=\"material-icons\">link</i></a></h3>\n<p>A single <code>app.use()</code> treats all other URLs as requests for static assets\nsuch as JavaScript, image, and style files.</p>\n<p>To ensure that clients can only download the files that they are permitted to see, put all client-facing asset files in\nthe <code>/dist</code> folder and only honor requests for files from the <code>/dist</code> folder.</p>\n<p>The following Node Express code routes all remaining requests to <code>/dist</code>, and returns a <code>404 - NOT FOUND</code> error if the\nfile isn't found.</p>\n<code-example path=\"universal/server.ts\" header=\"server.ts (static files)\" region=\"static\" linenums=\"false\">\n// Server <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> files from /<a href=\"api/animations/browser\" class=\"code-anchor\">browser</a>\napp.get('*.*', express.static(join(DIST_FOLDER, '<a href=\"api/animations/browser\" class=\"code-anchor\">browser</a>')));\n\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n - guide/architecture-next-steps\n-->\n<!-- links from this doc:\n - api/animations/browser\n - api/common/DOCUMENT\n - api/common/Location\n - api/common/http\n - api/common/http/HTTP_INTERCEPTORS\n - api/common/http/HttpClient\n - api/common/http/HttpHandler\n - api/common/http/HttpHeaders\n - api/common/http/HttpInterceptor\n - api/common/http/HttpRequest\n - api/core/ComponentRef#location\n - api/core/Inject\n - api/core/Injectable\n - api/core/NgModule\n - api/core/NgModule#bootstrap\n - api/core/Optional\n - api/http/Request\n - api/platform-server/PlatformConfig#document\n - api/platform-server/renderModuleFactory\n - api/router/RouterLink\n - api/router/RouterLinkWithHref\n - api/upgrade/static\n - generated/zips/universal/universal.zip\n - guide/aot-compiler\n - guide/glossary#cli\n - guide/router\n - guide/router#router-link\n - guide/universal#facilitate-web-crawlers-seo\n - guide/universal#filtering-request-urls\n - guide/universal#http-urls\n - guide/universal#improve-performance-on-mobile-and-low-powered-devices\n - guide/universal#server-side-rendering-ssr-an-intro-to-angular-universal\n - guide/universal#serving-static-files-safely\n - guide/universal#show-the-first-page-quickly\n - guide/universal#universal-engine\n - guide/universal#universal-in-action\n - guide/universal#universal-template-engine\n - guide/universal#universal-tutorial\n - guide/universal#universal-web-servers\n - guide/universal#using-absolute-urls-for-server-requests\n - guide/universal#why-use-server-side-rendering\n - guide/universal#working-around-the-browser-apis\n - tutorial\n - http://localhost:4000/\n - https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#throttling\n - https://developers.google.com/web/tools/lighthouse/audits/first-contentful-paint\n - https://developers.google.com/web/updates/2019/02/rendering-on-the-web\n - https://expressjs.com/\n - https://github.com/angular/angular/edit/master/aio/content/guide/universal.md?message=docs%3A%20describe%20your%20change...\n - https://github.com/angular/preboot\n - https://github.com/angular/universal\n - https://static.googleusercontent.com/media/www.google.com/en//webmasters/docs/search-engine-optimization-starter-guide.pdf\n - https://www.thinkwithgoogle.com/marketing-resources/data-measurement/mobile-page-speed-new-industry-benchmarks/\n-->"
}
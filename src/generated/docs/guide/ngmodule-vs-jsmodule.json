{
  "id": "guide/ngmodule-vs-jsmodule",
  "title": "JavaScript Modules vs. NgModules",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/ngmodule-vs-jsmodule.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"javascript-modules-vs-ngmodules\">JavaScript Modules vs. NgModules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-vs-jsmodule#javascript-modules-vs-ngmodules\"><i class=\"material-icons\">link</i></a></h1>\n<h4 id=\"prerequisites\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-vs-jsmodule#prerequisites\"><i class=\"material-icons\">link</i></a></h4>\n<p>A basic understanding of <a href=\"https://hacks.mozilla.org/2015/08/es6-in-depth-modules/\">JavaScript/ECMAScript modules</a>.</p>\n<hr>\n<p>JavaScript and Angular use modules to organize code, and\nthough they organize it differently, Angular apps rely on both.</p>\n<h2 id=\"javascript-modules\">JavaScript modules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-vs-jsmodule#javascript-modules\"><i class=\"material-icons\">link</i></a></h2>\n<p>In JavaScript, modules are individual files with JavaScript code in them. To make what’s in them available, you write an export statement, usually after the relevant code, like this:</p>\n<code-example language=\"typescript\">\nexport class AppComponent { ... }\n</code-example>\n<p>Then, when you need that file’s code in another file, you import it like this:</p>\n<code-example language=\"typescript\">\nimport { AppComponent } from './app.component';\n</code-example>\n<p>JavaScript modules help you namespace, preventing accidental global variables.</p>\n<h2 id=\"ngmodules\">NgModules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-vs-jsmodule#ngmodules\"><i class=\"material-icons\">link</i></a></h2>\n<!-- KW-- perMisko: let's discuss. This does not answer the question why it is different. Also, last sentence is confusing.-->\n<p>NgModules are classes decorated with <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>. The <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> decorator’s <code><a href=\"api/core/NgModule#imports\" class=\"code-anchor\">imports</a></code> array tells Angular what other NgModules the current module needs. The modules in the <code><a href=\"api/core/NgModule#imports\" class=\"code-anchor\">imports</a></code> array are different than JavaScript modules because they are NgModules rather than regular JavaScript modules. Classes with an <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> decorator are by convention kept in their own files, but what makes them an <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> isn’t being in their own file, like JavaScript modules; it’s the presence of <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> and its metadata.</p>\n<p>The <code>AppModule</code> generated from the <a href=\"cli\">Angular CLI</a> demonstrates both kinds of modules in action:</p>\n<code-example language=\"typescript\">\n/* These are JavaScript import statements. Angular doesn’t know anything about these. */\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\n/* The @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> decorator lets Angular know that this is an NgModule. */\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [\n    AppComponent\n  ],\n  <a href=\"api/core/NgModule#imports\" class=\"code-anchor\">imports</a>: [     /* These are <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> imports. */\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>\n  ],\n  providers: [],\n  <a href=\"api/core/NgModule#bootstrap\" class=\"code-anchor\">bootstrap</a>: [AppComponent]\n})\nexport class AppModule { }\n</code-example>\n<p>The NgModule classes differ from JavaScript module in the following key ways:</p>\n<ul>\n<li>An NgModule bounds <a href=\"guide/ngmodule-faq#q-declarable\">declarable classes</a> only.\nDeclarables are the only classes that matter to the <a href=\"guide/ngmodule-faq#q-angular-compiler\">Angular compiler</a>.</li>\n<li>Instead of defining all member classes in one giant file as in a JavaScript module,\nyou list the module's classes in the <code>@<a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">NgModule.declarations</a></code> list.</li>\n<li>An NgModule can only export the <a href=\"guide/ngmodule-faq#q-declarable\">declarable classes</a>\nit owns or imports from other modules. It doesn't declare or export any other kind of class.</li>\n<li>Unlike JavaScript modules, an NgModule can extend the <em>entire</em> application with services\nby adding providers to the <code>@<a href=\"api/core/NgModule#providers\" class=\"code-anchor\">NgModule.providers</a></code> list.</li>\n</ul>\n<hr>\n<h2 id=\"more-on-ngmodules\">More on NgModules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-vs-jsmodule#more-on-ngmodules\"><i class=\"material-icons\">link</i></a></h2>\n<p>For more information on NgModules, see:</p>\n<ul>\n<li><a href=\"guide/bootstrapping\">Bootstrapping</a>.</li>\n<li><a href=\"guide/frequent-ngmodules\">Frequently used modules</a>.</li>\n<li><a href=\"guide/providers\">Providers</a>.</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n - guide/bootstrapping\n - guide/feature-modules\n - guide/frequent-ngmodules\n - guide/lazy-loading-ngmodules\n - guide/module-types\n - guide/ngmodule-api\n - guide/ngmodule-faq\n - guide/ngmodules\n - guide/sharing-ngmodules\n-->\n<!-- links from this doc:\n - api/core/NgModule\n - api/core/NgModule#bootstrap\n - api/core/NgModule#declarations\n - api/core/NgModule#imports\n - api/core/NgModule#providers\n - api/platform-browser/BrowserModule\n - cli\n - guide/bootstrapping\n - guide/frequent-ngmodules\n - guide/ngmodule-faq#q-angular-compiler\n - guide/ngmodule-faq#q-declarable\n - guide/ngmodule-vs-jsmodule#javascript-modules\n - guide/ngmodule-vs-jsmodule#javascript-modules-vs-ngmodules\n - guide/ngmodule-vs-jsmodule#more-on-ngmodules\n - guide/ngmodule-vs-jsmodule#ngmodules\n - guide/ngmodule-vs-jsmodule#prerequisites\n - guide/providers\n - https://github.com/angular/angular/edit/master/aio/content/guide/ngmodule-vs-jsmodule.md?message=docs%3A%20describe%20your%20change...\n - https://hacks.mozilla.org/2015/08/es6-in-depth-modules/\n-->"
}